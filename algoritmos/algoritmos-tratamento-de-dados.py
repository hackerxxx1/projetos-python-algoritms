# -*- coding: utf-8 -*-
"""Cópia de Base_cmc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gL_ltUiE137tlo4zW6GwWsGcrsBjcR6O
"""

!pip install plotly --upgrade

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)
banco = pd.read_csv('cmc.csv')
print(banco.head(10))
print('-------------------------')
print(banco.tail(10))
print('-------------------------')
print(banco.columns)

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)
banco = pd.read_csv('cmc.csv')
print(banco.describe())

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)
banco = pd.read_csv('cmc.csv')
banco2 = banco.iloc[:,0:14].values
print(banco2[0])

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)
banco = pd.read_csv('cmc.csv')
print(banco[banco['24']==45])

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)
banco = pd.read_csv('cmc.csv')
print(banco.loc[banco['24'] == "."])
print('-----------------------')
#banco.loc[banco['24'] < 0, '24'] = banco['24'][banco['24'] > 0].mean()
print(banco.loc[pd.isnull(banco['24'])])
print('---------------')
banco['24'].fillna(banco['24'].mean(), inplace = True)
print(banco.head(30))
#banco2 = banco.drop(banco[banco['24'] < 0].index)

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)
banco = pd.read_csv('cmc.csv')
print(banco.isnull().sum())
np.unique(banco['24'], return_counts=True)
sns.countplot(x = banco['24']);

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)
banco = pd.read_csv('cmc.csv')

grafico = px.parallel_categories(banco, dimensions=['24', '2', '3.1'])
grafico.show()

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)
banco = pd.read_csv('cmc.csv')
grafico = px.treemap(banco, path=['3.1', '24'])
grafico.show()

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)
banco = pd.read_csv('cmc.csv')
banco.loc[banco['24'] < 0, '24'] = banco['24'][banco['24'] > 0].mean()
banco['24'].fillna(banco['24'].mean(), inplace = True)
banco2 = banco.iloc[:, 1:4].values
banco3 = banco.iloc[:, 4].values
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
banco2 = scaler.fit_transform(banco2)
from sklearn.model_selection import train_test_split
banco2_treinamento, banco2_teste, banco3_treinamento, banco3_teste = train_test_split(banco2, banco3, test_size = 0.25, random_state = 0)
import pickle
with open('contra.pkl', mode = 'wb') as f: pickle.dump([banco2_treinamento, banco3_treinamento, banco2_teste, banco3_teste], f)

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)
banco = pd.read_csv('cmc.csv')
banco.loc[banco['24'] < 0, '24'] = banco['24'][banco['24'] > 0].mean()
banco['24'].fillna(banco['24'].mean(), inplace = True)
banco2 = banco.iloc[:, 1:4].values
banco3 = banco.iloc[:, 4].values
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
banco2 = scaler.fit_transform(banco2)
from sklearn.model_selection import train_test_split
banco2_treinamento, banco2_teste, banco3_treinamento, banco3_teste = train_test_split(banco2, banco3, test_size = 0.25, random_state = 0)
print(banco2_treinamento.shape, banco3_treinamento.shape)
print(banco2_teste.shape, banco3_teste.shape)

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
import pickle
with open('contra.pkl', 'rb') as a:  
  x_banco_treinamento, y_banco_treinamento, x_banco_teste, y_banco_teste = pickle.load(a)
from sklearn.linear_model import LogisticRegression
logistic_banco = LogisticRegression(random_state = 1)
logistic_banco.fit(x_banco_treinamento, y_banco_treinamento)
print(logistic_banco.intercept_)
print(logistic_banco.coef_)

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
import pickle
with open('contra.pkl', 'rb') as a:  
  x_banco_treinamento, y_banco_treinamento, x_banco_teste, y_banco_teste = pickle.load(a)
from sklearn.linear_model import LogisticRegression
logistic_banco = LogisticRegression(random_state = 1)
logistic_banco.fit(x_banco_treinamento, y_banco_treinamento)
previsoes = logistic_banco.predict(x_banco_teste)
from sklearn.metrics import accuracy_score, classification_report
accuracy_score(y_banco_teste, previsoes)
from yellowbrick.classifier import ConfusionMatrix
cm = ConfusionMatrix(logistic_banco)
cm.fit(x_banco_treinamento, y_banco_treinamento)
cm.score(x_banco_teste, y_banco_teste)

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
import pickle
with open('contra.pkl', 'rb') as f:  
  x_banco_treinamento, y_banco_treinamento, x_banco_teste, y_banco_teste = pickle.load(f)
from sklearn.svm import SVC
svm_banco = SVC(kernel='linear', random_state=1, C = 2.0)
svm_banco.fit(x_banco_treinamento, y_banco_treinamento)
previsoes = svm_banco.predict(x_banco_teste)
from sklearn.metrics import accuracy_score, classification_report
accuracy_score(y_banco_teste, previsoes)
from yellowbrick.classifier import ConfusionMatrix
cm = ConfusionMatrix(svm_banco)
cm.fit(x_banco_treinamento, y_banco_treinamento)
cm.score(x_banco_teste, y_banco_teste)

# Commented out IPython magic to ensure Python compatibility.
# %reset -f
import pickle
with open('contra.pkl', 'rb') as a:  
  x_banco_treinamento, y_banco_treinamento, x_banco_teste, y_banco_teste = pickle.load(a)
from sklearn.svm import SVC
svm_banco = SVC(kernel='linear', random_state=1 , C = 2.0)
svm_banco.fit(x_banco_treinamento, y_banco_treinamento)
print(svm_banco)
previsoes = svm_banco.predict(x_banco_teste)
print(previsoes)
print('-----------------')
print(y_banco_teste)

import random
import signal
import time
import sys

numero = random.randrange(1, 30)


print('Chute um número entre 1 e 30.')
chute = int(input())
chuteanta=1
chuteantb=30
ctd= 0
while (type(chute) == int) and (chute < 31) and (chute > 0) and ctd < 7:

  if chute < numero:
    ctd=ctd+1
    print('Seu chute foi muito baixo.')
    print("Tente outro número entre %d e %d... voce tentou %d vezes voce tem mais %d chances" %(chute,chuteantb,ctd,8-ctd))
    chuteanta = chute
    chute = int(input())
     
  elif chute > numero:
    ctd=ctd+1
    print('Seu chute foi muito alto.')
    print("Tente outro número entre %d e %d... voce tentou %d vezes voce tem mais %d chances" %(chuteanta,chute,ctd,8-ctd))
    chuteantb=chute
    chute = int(input())
    
  else:
    print(f'Ótimo! Acertou o número {numero}')
    break

if (type(chute) != int) or (chute >= 31) or (chute <= 0):
  print('erro...')

"""# Nova seção"""