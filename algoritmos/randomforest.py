# -*- coding: utf-8 -*-
"""RandomForest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sPf4YU3pWylmMAT8y1qZJmxxLaZyapYy
"""

#Nomes e martícula

# Caio dos Santos Rodrigues - 20114290130
# Gabriel Rodrigues da Silva - 20114290052
# Júlia Daphiny Lins Brandão - 20114290029

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)

banco = pd.read_csv('cmc.csv')

from sklearn.model_selection import train_test_split
banco2_treinamento, banco2_teste, banco3_treinamento, banco3_teste = train_test_split(banco2, banco3, test_size = 0.25, random_state = 0)

#formato das variaveis, linhas e colunas

print(banco2_teste.shape)
print(banco3_treinamento.shape)
print(banco2_treinamento.shape)
print(banco3_teste.shape)

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)

banco = pd.read_csv('cmc.csv')

from sklearn.model_selection import train_test_split
banco2_treinamento, banco2_teste, banco3_treinamento, banco3_teste

from sklearn.ensemble import RandomForestClassifier
random_forest_credit = RandomForestClassifier(n_estimators = 100, criterion = 'entropy', random_state = 0) # parametros
random_forest_credit.fit(banco2_treinamento, banco3_treinamento) 

# O random fit esta fazendo o treinamento dos parametros que passei pelo classificador 
# Resultado dos parametros que estão sendo utilizados

#Arquivo PKL

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)

from sklearn.model_selection import train_test_split
banco2_treinamento, banco2_teste, banco3_treinamento, banco3_teste

import pickle

with open('contra.pkl', mode = 'wb') as f: pickle.dump([banco2_treinamento, banco3_treinamento, banco2_teste, banco3_teste], f)

# Commented out IPython magic to ensure Python compatibility.
# %reset -f

import pickle
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)

banco = pd.read_csv('cmc.csv')

banco2 = banco.iloc[:, 0:6].values
banco3 = banco.iloc[:, 9].values

from sklearn.model_selection import train_test_split
banco2_treinamento, banco2_teste, banco3_treinamento, banco3_teste = train_test_split(banco2, banco3, test_size = 0.25, random_state = 0)

from sklearn.ensemble import RandomForestClassifier
random_forest_credit = RandomForestClassifier(n_estimators = 40, criterion = 'entropy', random_state = 0)
random_forest_credit.fit(banco2_treinamento, banco3_treinamento)
previsores = random_forest_credit.predict(banco2_teste) 

# Previsão dos valores que temos em banco2_teste
# Previsões que a maquina fez referente as linhas de teste 

print(previsores)
print(banco3_teste)

# Commented out IPython magic to ensure Python compatibility.
# %reset -f

import pickle
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)

banco = pd.read_csv('cmc.csv')

banco2 = banco.iloc[:, 0:6].values
banco3 = banco.iloc[:, 9].values

from sklearn.model_selection import train_test_split
banco2_treinamento, banco2_teste, banco3_treinamento, banco3_teste = train_test_split(banco2, banco3, test_size = 0.25, random_state = 0)

from sklearn.ensemble import RandomForestClassifier
random_forest_credit = RandomForestClassifier(n_estimators = 90, criterion = 'entropy', random_state = 0)
random_forest_credit.fit(banco2_treinamento, banco3_treinamento)
previsores = random_forest_credit.predict(banco2_teste)

from sklearn.metrics import accuracy_score, classification_report # nota de precisão
print(accuracy_score(banco3_teste, previsores)) # comparar resultado anterior com as previsões 

from yellowbrick.classifier import ConfusionMatrix
cm = ConfusionMatrix(random_forest_credit)
cm.fit(banco2_treinamento,banco3_treinamento)
cm.score(banco2_teste,banco3_teste)

# Commented out IPython magic to ensure Python compatibility.
# %reset -f

import pickle
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)

banco = pd.read_csv('cmc.csv')

banco2 = banco.iloc[:, 0:7].values
banco3 = banco.iloc[:, 9].values

from sklearn.model_selection import train_test_split
banco2_treinamento, banco2_teste, banco3_treinamento, banco3_teste = train_test_split(banco2, banco3, test_size = 0.10, random_state = 0)

from sklearn.ensemble import RandomForestClassifier
random_forest_banco = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
random_forest_banco.fit(banco2_treinamento, banco3_treinamento)
previsores = random_forest_banco.predict(banco2_teste)

from sklearn.metrics import accuracy_score, classification_report
print(accuracy_score(banco3_teste, previsores))

from yellowbrick.classifier import ConfusionMatrix
cm = ConfusionMatrix(random_forest_banco)
cm.fit(banco2_treinamento,banco3_treinamento)
cm.score(banco2_teste,banco3_teste)

#BASE

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
np.set_printoptions(threshold=np.inf)

banco = pd.read_csv('cmc.csv') 

print(banco.shape) #1472 linhas, 10 colunas